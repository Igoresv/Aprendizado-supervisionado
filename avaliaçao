{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN6r612ka5JP3TqUgz6PAfq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Igoresv/Aprendizado-supervisionado/blob/main/avalia%C3%A7ao\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O2dX8Xo3TmZe"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.svm import SVC\n",
        "import numpy as np\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier, plot_tree\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "wine = pd.read_csv(\"winequalityN.csv\")\n",
        "wine2 = pd.read_csv(\"winequalityN.csv\")\n",
        "wine = wine.loc[wine['type'] == 'white']\n",
        "wine_red = wine2.loc[wine2['type'] == 'red']\n",
        "wine.head()\n",
        "wine_red.head()\n",
        "\n",
        "wine[\"opinion\"] = wine['quality'].apply(lambda x: 0 if x <= 5 else 1)\n",
        "wine_red[\"opinion\"] =  wine_red['quality'].apply(lambda x: 0 if x <= 5 else 1)\n",
        "vars = [\n",
        "   'fixed acidity',\n",
        "   'volatile acidity',\n",
        "   'citric acid',\n",
        "   'residual sugar',\n",
        "   'chlorides',\n",
        "   'free sulfur dioxide',\n",
        "   'total sulfur dioxide',\n",
        "   'density',\n",
        "   'pH',\n",
        "   'sulphates',\n",
        "   'alcohol'\n",
        "]\n",
        "\n",
        "wine.describe()\n",
        "\n",
        "print(wine[vars].isna().sum())\n",
        "# fill the missing values\n",
        "for col, value in wine.items():\n",
        "    if col != 'type':\n",
        "        wine[col] = wine[col].fillna(wine[col].mean())\n",
        "X= wine[vars]\n",
        "y= wine ['opinion']\n",
        "\n",
        "print(X.isna().sum())\n",
        "print(wine[vars].isna().sum())\n",
        "\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X.values,\n",
        "                                                    y.values,\n",
        "                                                    test_size=0.2, # 20 % da base\n",
        "                                                    random_state=171,\n",
        "                                                    stratify=y)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "model = LogisticRegression()\n",
        "model.fit(X_train_scaled, y_train)\n",
        "\n",
        "\n",
        "y_pred_train = model.predict(X_train_scaled)\n",
        "\n",
        "\n",
        "y_pred_test = model.predict(X_test_scaled)\n",
        "\n",
        "accuracy_train = accuracy_score(y_train, y_pred_train)\n",
        "accuracy_test = accuracy_score(y_test, y_pred_test)\n",
        "\n",
        "precision_train = precision_score(y_train, y_pred_train)\n",
        "precision_test = precision_score(y_test, y_pred_test)\n",
        "\n",
        "recall_train = recall_score(y_train, y_pred_train)\n",
        "recall_test = recall_score(y_test, y_pred_test)\n",
        "\n",
        "f1_train = f1_score(y_train, y_pred_train)\n",
        "f1_test = f1_score(y_test, y_pred_test)\n",
        "print(\"Resultados para o conjunto de treinamento:\")\n",
        "print(\"Acurácia:\", accuracy_train)\n",
        "print(\"Precisão:\", precision_train)\n",
        "print(\"Recall:\", recall_train)\n",
        "print(\"F1-score:\", f1_train)\n",
        "\n",
        "print(\"Resultados para o conjunto de teste:\")\n",
        "print(\"Acurácia:\", accuracy_test)\n",
        "print(\"Precisão:\", precision_test)\n",
        "print(\"Recall:\", recall_test)\n",
        "print(\"F1-score:\", f1_test)\n",
        "\n",
        "\n",
        "cv = StratifiedKFold(n_splits=10)\n",
        "\n",
        "accuracy_scores = []\n",
        "precision_scores = []\n",
        "recall_scores = []\n",
        "f1_scores = []\n",
        "\n",
        "for train_idx, val_idx in cv.split(X, y):\n",
        "    X_train\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X.values,\n",
        "                                                    y.values,\n",
        "                                                    test_size=0.2,\n",
        "                                                    random_state=171,\n",
        "                                                    stratify=y)\n",
        "\n",
        "\n",
        "model_decision_tree = DecisionTreeClassifier()\n",
        "cv = StratifiedKFold(n_splits=10)\n",
        "accuracy_scores = cross_val_score(model_decision_tree, X_train, y_train, cv=cv, scoring='accuracy')\n",
        "precision_scores = cross_val_score(model_decision_tree, X_train, y_train, cv=cv, scoring='precision')\n",
        "recall_scores = cross_val_score(model_decision_tree, X_train, y_train, cv=cv, scoring='recall')\n",
        "f1_scores = cross_val_score(model_decision_tree, X_train, y_train, cv=cv, scoring='f1')\n",
        "\n",
        "\n",
        "mean_accuracy = np.mean(accuracy_scores)\n",
        "std_accuracy = np.std(accuracy_scores)\n",
        "\n",
        "mean_precision = np.mean(precision_scores)\n",
        "std_precision = np.std(precision_scores)\n",
        "\n",
        "mean_recall = np.mean(recall_scores)\n",
        "std_recall = np.std(recall_scores)\n",
        "\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "std_f1 = np.std(f1_scores)\n",
        "\n",
        "\n",
        "print(\"Resultados para o conjunto de teste:\")\n",
        "print(\"Média e desvio da acurácia:\", mean_accuracy, std_accuracy)\n",
        "print(\"Média e desvio da precisão:\", mean_precision, std_precision)\n",
        "print(\"Média e desvio da recall:\", mean_recall, std_recall)\n",
        "print(\"Média e desvio do F1-score:\", mean_f1, std_f1)\n",
        "\n",
        "\n",
        "model_decision_tree.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred_test = model_decision_tree.predict(X_test)\n",
        "\n",
        "\n",
        "accuracy_test = accuracy_score(y_test, y_pred_test)\n",
        "precision_test = precision_score(y_test, y_pred_test)\n",
        "recall_test = recall_score(y_test, y_pred_test)\n",
        "f1_test = f1_score(y_test, y_pred_test)\n",
        "\n",
        "print(\"Resultados para o conjunto de teste final:\")\n",
        "print(\"Acurácia:\", accuracy_test)\n",
        "print(\"Precisão:\", precision_test)\n",
        "print(\"Recall:\", recall_test)\n",
        "print(\"F1-score:\", f1_test)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "plot_tree(model_decision_tree, feature_names=X.columns, class_names=[\"0\", \"1\"], filled=True)\n",
        "plt.show()\n",
        "\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X.values,\n",
        "                                                    y.values,\n",
        "                                                    test_size=0.2,\n",
        "                                                    random_state=171,\n",
        "                                                    stratify=y)\n",
        "\n",
        "\n",
        "model_svm = SVC()\n",
        "cv = StratifiedKFold(n_splits=10)\n",
        "accuracy_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='accuracy')\n",
        "precision_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='precision')\n",
        "recall_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='recall')\n",
        "f1_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='f1')\n",
        "\n",
        "\n",
        "mean_accuracy = np.mean(accuracy_scores)\n",
        "std_accuracy = np.std(accuracy_scores)\n",
        "\n",
        "mean_precision = np.mean(precision_scores)\n",
        "std_precision = np.std(precision_scores)\n",
        "\n",
        "mean_recall = np.mean(recall_scores)\n",
        "std_recall = np.std(recall_scores)\n",
        "\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "std_f1 = np.std(f1_scores)\n",
        "\n",
        "\n",
        "print(\"Resultados para o conjunto de teste:\")\n",
        "print(\"Média e desvio da acurácia:\", mean_accuracy, std_accuracy)\n",
        "print(\"Média e desvio da precisão:\", mean_precision, std_precision)\n",
        "print(\"Média e desvio da recall:\", mean_recall, std_recall)\n",
        "print(\"Média e desvio do F1-score:\", mean_f1, std_f1)\n",
        "\n",
        "model_svm.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred_test = model_svm.predict(X_test)\n",
        "\n",
        "\n",
        "accuracy_test = accuracy_score(y_test, y_pred_test)\n",
        "precision_test = precision_score(y_test, y_pred_test)\n",
        "recall_test = recall_score(y_test, y_pred_test)\n",
        "f1_test = f1_score(y_test, y_pred_test)\n",
        "\n",
        "print(\"Resultados para o conjunto de teste final:\")\n",
        "print(\"Acurácia:\", accuracy_test)\n",
        "print(\"Precisão:\", precision_test)\n",
        "print(\"Recall:\", recall_test)\n",
        "print(\"F1-score:\", f1_test)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "models = [model_logistic, model_decision_tree, model_svm]\n",
        "model_names = ['Regressão Logística', 'Árvore de Decisão', 'SVM']\n",
        "\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "for model, name in zip(models, model_names):\n",
        "    if hasattr(model, 'predict_proba'):\n",
        "        \n",
        "        y_prob = model.predict_proba(X_test)[:, 1]\n",
        "    else:\n",
        "       \n",
        "        y_scores = model.decision_function(X_test)\n",
        "      \n",
        "        y_prob = (y_scores - y_scores.min()) / (y_scores.max() - y_scores.min())\n",
        "    \n",
        "    fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    \n",
        "  \n",
        "    plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc:.2f})')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('Taxa de Falsos Positivos')\n",
        "plt.ylabel('Taxa de Verdadeiros Positivos')\n",
        "plt.title('Curva ROC Média dos Modelos')\n",
        "plt.legend(loc='lower right')\n",
        "plt.grid(True)\n",
        "\n",
        "\n",
        "plt.show()\n",
        "\n",
        "#Baseado na curva o SVM é mais efetivo\n",
        "X= wine_red[vars]\n",
        "y= wine_red['opinion']\n",
        "for col, value in wine_red.items():\n",
        "    if col != 'type':\n",
        "        wine_red[col] = wine_red[col].fillna(wine_red[col].mean())\n",
        "\n",
        "print(wine_red[vars].isna().sum())\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X.values,\n",
        "                                                    y.values,\n",
        "                                                    test_size=0.2,\n",
        "                                                    random_state=171,\n",
        "                                                    stratify=y)\n",
        "\n",
        "\n",
        "model_svm = SVC()\n",
        "cv = StratifiedKFold(n_splits=10)\n",
        "accuracy_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='accuracy')\n",
        "precision_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='precision')\n",
        "recall_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='recall')\n",
        "f1_scores = cross_val_score(model_svm, X_train, y_train, cv=cv, scoring='f1')\n",
        "\n",
        "\n",
        "mean_accuracy = np.mean(accuracy_scores)\n",
        "std_accuracy = np.std(accuracy_scores)\n",
        "\n",
        "mean_precision = np.mean(precision_scores)\n",
        "std_precision = np.std(precision_scores)\n",
        "\n",
        "mean_recall = np.mean(recall_scores)\n",
        "std_recall = np.std(recall_scores)\n",
        "\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "std_f1 = np.std(f1_scores)\n",
        "\n",
        "\n",
        "print(\"Resultados para o conjunto de teste:\")\n",
        "print(\"Média e desvio da acurácia:\", mean_accuracy, std_accuracy)\n",
        "print(\"Média e desvio da precisão:\", mean_precision, std_precision)\n",
        "print(\"Média e desvio da recall:\", mean_recall, std_recall)\n",
        "print(\"Média e desvio do F1-score:\", mean_f1, std_f1)\n",
        "\n",
        "model_svm.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred_test = model_svm.predict(X_test)\n",
        "\n",
        "\n",
        "accuracy_test = accuracy_score(y_test, y_pred_test)\n",
        "precision_test = precision_score(y_test, y_pred_test)\n",
        "recall_test = recall_score(y_test, y_pred_test)\n",
        "f1_test = f1_score(y_test, y_pred_test)\n",
        "\n",
        "print(\"Resultados para o conjunto de teste final:\")\n",
        "print(\"Acurácia:\", accuracy_test)\n",
        "print(\"Precisão:\", precision_test)\n",
        "print(\"Recall:\", recall_test)\n",
        "print(\"F1-score:\", f1_test)\n"
      ]
    }
  ]
}